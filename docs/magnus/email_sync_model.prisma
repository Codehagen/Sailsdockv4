// EmailSync model - For storing synced emails from email providers
model EmailSync {
  id              String    @id @default(cuid())
  externalId      String    // Original email ID from the provider
  subject         String
  body            String    @db.Text
  htmlBody        String?   @db.Text
  sentAt          DateTime
  receivedAt      DateTime?
  fromEmail       String
  fromName        String?
  toEmail         String[]
  ccEmail         String[]
  bccEmail        String[]
  attachments     Json?     // Store metadata about attachments
  isRead          Boolean   @default(false)
  isStarred       Boolean   @default(false)
  isDeleted       Boolean   @default(false)  // For soft delete in CRM (doesn't affect original email)
  folderPath      String?   // Original folder/label in email provider
  threadId        String?   // For grouping emails in the same conversation
  importance      String?   // Priority/importance flag from email
  createdAt       DateTime  @default(now())  // When email was synced to CRM
  updatedAt       DateTime  @updatedAt

  // Relations
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  businessId      String?
  business        Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  
  contactId       String?
  contact         Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  providerId      String
  emailProvider   EmailProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  // Timeline relation (optional - if you want to implement a separate Timeline model)
  // timelineId      String?
  // timeline        Timeline? @relation(fields: [timelineId], references: [id])

  @@unique([userId, externalId])  // Ensure no duplicate emails for the same user
  @@index([userId, businessId])   // Optimize queries for user's emails related to a business
  @@index([userId, sentAt])       // Optimize timeline queries
  @@map("email_syncs")
}
